
''' Задание №3 - задача№1'''

'''1. Написать функцию num_translate(), переводящую числительные от 0 до 10 c английского на русский
 язык. Например:
num_translate("one")
"один"
num_translate("eight")
"восемь"
Если перевод сделать невозможно, вернуть None. Подумайте, как и где лучше хранить информацию,
необходимую для перевода: какой тип данных выбрать, в теле функции или снаружи.'''

''' РЕШЕНИЕ 3.1'''

def num_translater(en_d):
   eng_ru = {
      "zero": "ноль",
      "one": "один",
      "two": "два",
      "three": "три",
      "four": "четыре",
      "five": "пять",
      "six": "шесть",
      "seven": "семь",
      "eight": "восемь",
      "nine": "девять"
   }
   return eng_ru.get(en_d)

''' Проверка'''
en_d = "four"
print(num_translater(en_d))

'''четыре'''

'''2. * (вместо задачи 1) Доработать предыдущую функцию в num_translate_adv(): реализовать корректную
 работу с числительными, начинающимися с заглавной буквы — результат тоже должен быть с заглавной.
  Например:
num_translate_adv("One")
"Один"
num_translate_adv("two")
"два"'''

'''РЕШЕНИЕ 3.2'''
def num_translater_adv(en_d):
   eng_ru = {
      "zero": "ноль",
      "one": "один",
      "two": "два",
      "three": "три",
      "four": "четыре",
      "five": "пять",
      "six": "шесть",
      "seven": "семь",
      "eight": "восемь",
      "nine": "девять"
   }
   if en_d == en_d.capitalize():
      en_d = en_d.lower()
      big_ru = eng_ru.get(en_d)
      return big_ru.capitalize()
   else:
      return eng_ru.get(en_d)


'''Проверка'''
en_d = "five"
print(num_translater_adv(en_d))
'''пять'''

en_d = "Five"
print(num_translater_adv(en_d))
'''Пять'''


'''3. Написать функцию thesaurus(), принимающую в качестве аргументов имена сотрудников и 
возвращающую словарь, в котором ключи — первые буквы имён, а значения — списки, 
содержащие имена, начинающиеся с соответствующей буквы. Например:
thesaurus("Иван", "Мария", "Петр", "Илья")
{
    "И": ["Иван", "Илья"], 
    "М": ["Мария"], "П": ["Петр"]
}'''


'''РЕШЕНИЕ 3.3'''


def thesaurus(name_off):
    dict_name = {}
    for nam in name_off:
        kei = nam[0]
        if kei in dict_name:
            dict_name[kei].append(nam)
        else:
            dict_name[kei] = [nam]
    return print(dict_name)

'''Проверка'''

name_off = ['Василий', 'Петр', 'Сергей', 'Володя']
thesaurus(name_off)

'''выдает  {'В': ['Василий', 'Володя'], 'П': ['Петр'], 'С': ['Сергей']}'''


'''5. Реализовать функцию get_jokes(), возвращающую n шуток, сформированных из трех случайных слов, 
взятых из трёх списков (по одному из каждого):
nouns = ["автомобиль", "лес", "огонь", "город", "дом"]
adverbs = ["сегодня", "вчера", "завтра", "позавчера", "ночью"]
adjectives = ["веселый", "яркий", "зеленый", "утопичный", "мягкий"]
        Например:
get_jokes(2)
["лес завтра зеленый", "город вчера веселый"]
Документировать код функции.'''



def get_jokes(n):
        i = 0
        shut_it = []
           '''Объявляем переменную списком - пока пустым
              эта переменная будет возвращаться нашей функцией get_jokes'''
        while i < n:
                '''объявляем цикл'''
                shut_m = []
                from random import choice
                nouns = ["автомобиль", "лес", "огонь", "город", "дом"]
                nam_1 = choice(nouns)
                '''перебираем слуайным образом слова в первом списке'''
                adverbs = ["сегодня", "вчера", "завтра", "позавчера", "ночью"]
                nam_2 = choice(adverbs)
                '''перебираем случайным образом слова во втором списке'''
                adjectives = ["веселый", "яркий", "зеленый", "утопичный", "мягкий"]
                nam_3 = choice(adjectives)
                '''перебираем случайным образом слова в третьем списке'''
                shut_m = [nam_1 + ' ' + nam_2 + ' ' + nam_3]
                '''складываем три случайно выбранных слова и делаем список'''
                i += 1
                shut_it = shut_it + shut_m
                '''после каждой итерации складываем списки в итоговый список  
                   наш итоговый список с шутками возвращается функцией'''

        return print(shut_it)


'''Проверка кода. Вроде Ок.'''
get_jokes(3)
['город завтра мягкий', 'город позавчера яркий', 'город ночью зеленый']
